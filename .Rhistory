#Inspect rhat
mcmc_rhat(rhat(morph_b_mod))
#Inspect Autocorrelation
mcmc_acf(as.data.frame(morph_b_mod))
#Model Assumptions
morph_fit <- predict(morph_b_mod) %>% as_tibble
morph_res <- residuals(morph_b_mod) %>% as_tibble
qplot(morph_fit$Estimate, morph_res$Estimate)
#Fit
pp_check(morph_b_mod, type = "scatter")
#Normality
qqnorm(morph_res$Estimate)
qqlin(morph_res$Estimate)
qqline(morph_res$Estimate)
pp_check(morph_b_mod, type="error_hist", bins= 8)
pp_check(morph_b_mod, type="error_hist", binwidth= 8)
pp_check(morph_b_mod, type="error_hist", bins= 8)
#Match to Posterior
pp_check(morph_b_mod, type="stat_2d", test=c("mean", "sd"))
pp_check(morph_b_mod)
#coefficients
summary(morph_b_mod, digits=5)
####Confidence Intervals####
posterior_interval(morph_b_mod)
####Visualize####
morph_chains <- as.data.frame(morph_b_mod)
morph_plot +
geom_abline(intercept=morph_chains[,1], slope = morph_chains[,2], alpha=0.1, color="lightgrey") +
geom_abline(intercept=fixef(morph_b_mod)[1], slope = fixef(morph_b_mod)[2], color="red") +
geom_point()
morph_b_mod
morph_chians
morph_chains
####Summary of 3 Fits for Comparison####
#Least Squares
tidy(Morph_lm)
confint(Morph_lm)
#Likelihood
tidy(morph_od)
#Likelihood
tidy(morph_mod)
confint(morph_mod, method = "quad")
#Bayes
summary(morph_b_mod, digits = 5)
posterior_interval(morph_mod)
posterior_interval(morph_b_mod)
#Call the glm() to provide reasonable bounds
summary(morph_mod)
####Create Function####
likelihood_function <- function(slope, intercept, residual_sd) {
#Generate Data
culmen_fit <- intercept + slope * Morphology$Tarsus
#Generate Likelihood
sum(dnorm(Morphology$Culmen, culmen_fit, residual_sd, log = TRUE))
}
####Grid Sample with Function####
morph_grid <- crossing(intercept = -0.099,
slope = seq(0.1, 0.4, by = 0.01),
residual_sd = seq(0.1, 0.3, by = 0.1)) %>%
rowwise() %>%
mutate(logLikelihood = likelihood_function(slope, intercept, residual_sd)) %>%
ungroup()
#Find the MLE:
MLE <- morph_grid %>%
filter(logLikelihood == max(logLikelihood))
MLE
#Compare to:
morph_mod
ggplot(morph_grid %>%
filter(residual_sd == 0.3) %>%
filter(logLikelihood > max(logLikelihood)- 2),
aes(x = intercept, y = slope, fill = exp(logLikelihood))) +
geom_raster() +
scale_fill_viridis(option = "B")
####Not sure I need to do this but.....
library(viridis)
ggplot(morph_grid %>%
filter(residual_sd == 0.3) %>%
filter(logLikelihood > max(logLikelihood)- 2),
aes(x = intercept, y = slope, fill = exp(logLikelihood))) +
geom_raster() +
scale_fill_viridis(option = "B")
ggplot(morph_grid %>%
filter(residual_sd == 0.3) %>%
filter(logLikelihood > max(logLikelihood)- 2),
aes(x = residual_sd, y = slope, fill = exp(logLikelihood))) +
geom_raster() +
scale_fill_viridis(option = "B")
str(morph_chains)
head(morph_chains)
head(morph_grid)
#Find Confidence Interval for Slope
morph_profile_slope <- morph_chains %>%
group_by(slope) %>%
filter(logLikelihood == max(logLikelihood)) %>%
ungroup()
#Find Confidence Interval for Slope
morph_profile_slope <- morph_grid %>%
group_by(slope) %>%
filter(logLikelihood == max(logLikelihood)) %>%
ungroup()
morph_profile_slope %>%
filter(logLikelihood > max(logLikelihood) - 1.92) %>%
arrange(slope) %>%
filter(row_number() == 1|row_number() == n())
#75% CI so what would be the 80% CI?
morph_profile_slope %>%
filter(logLikelihood > max(logLikelihood) - 0.66) %>%
arrange(slope) %>%
filter(row_number() == 1|row_number() == n())
####Create Function####
likelihood_function <- function(slope, intercept, residual_sd) {
#Generate Data
culmen_fit <- intercept + slope * Morphology$Tarsus
#Generate Likelihood
sum(dnorm(Morphology$Culmen, culmen_fit, residual_sd, log = TRUE))
}
####Grid Sample with Function####
morph_grid <- crossing(intercept = -0.099,
slope = seq(0.1, 0.4, by = 0.01),
residual_sd = seq(0.1, 0.3, by = 0.1)) %>%
rowwise() %>%
mutate(log_like = likelihood_function(slope, intercept, residual_sd)) %>%
ungroup()
#Find the MLE:
MLE <- morph_grid %>%
filter(log_like == max(log_like))
MLE
morph_slope_profile <- morph_grid %>%
group_by(slope) %>%
filter(log_like == max(log_like)) %>%
ungroup()
qplot(slope, log_like, data = morph_slope_profile, geom = "line")
#Find Confidence Interval for Slope
morph_slope_profile %>%
filter(log_like > max(log_like) - 1.92) %>%
filter(row_number() == 1 | row_number() == n())
unique(slope)
ggplot(morph_grid %>%
filter(residual_sd == 0.3) %>%
filter(logLikelihood > max(logLike) - 1.92),
aes(x = residual_sd, y = slope, fill = exp(logLike))) +
geom_raster() +
scale_fill_viridis(option = "B")
morph_prior <- brm(Culmen ~ Tarsus,
data = Morphology,
family = gaussian(),
prior = normal(0.4, 0.01))
summary(morph_prior, digits = 5)
posterior_interval(morph_prior)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(readr)
library(broom)
library(dplyr)
library(purrr)
library(broom)
library(bbmle)
library(MASS)
library(profileModel)
library(brms)
library(bayesplot)
library(tidybayes)
library(shinystan)
morph_prior <- brm(Culmen ~ Tarsus,
data = Morphology,
family = gaussian(),
prior = normal(0.4, 0.01))
summary(morph_prior, digits = 5)
posterior_interval(morph_prior)
morph_prior <- brm(Culmen ~ Tarsus,
data = Morphology,
family = gaussian(),
prior = normal(0.4, 0.01))
? prior =
?prior
morph_prior <- brm(Culmen ~ Tarsus,
data = Morphology,
family = gaussian(),
prior = 0.4, 0.01)
morph_prior <- brm(Culmen ~ Tarsus,
data = Morphology,
family = gaussian(),
set_prior = 0.4, 0.01)
summary(morph_prior, digits = 5)
posterior_interval(morph_prior)
morph_prior <- brm(Culmen ~ Tarsus,
data = Morphology,
family = gaussian(),
set_prior = 0.4, 0.01)
Morphology <- read_csv("../Data/Morphology data.csv")
#Look at the data
head(Morphology)
#Rename difficult column names
Morphology <- rename(Morphology, Tarsus = `Tarsus (mm)`, Culmen = `Culmen (mm)`)
#There are NAs and certain columns that we will not be using so I will restructure the data to omit unneeded columns.
Morphology <- Morphology[-c(2:5, 8:10)] %>%
na.omit()
Morphology <- read_csv("../Data/Morphology data.csv")
Morphology <- read_csv("../Data/Morphology data.csv")
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(tidyverse)
library(readr)
library(broom)
library(dplyr)
library(purrr)
library(broom)
library(bbmle)
library(MASS)
library(profileModel)
library(brms)
library(bayesplot)
library(tidybayes)
library(shinystan)
#### Create Simulation with provided parameters ####
# List parameters
simulation <- data.frame(intercept = c(100, 115, 130),
slope = 0.00237) %>%
crossing(residual_sd = 3:10) %>%
crossing(sample_size = 3:15) %>%
# Set up sampling
group_by(intercept, slope, residual_sd, sample_size) %>%
expand(reps = 1:sample_size) %>%
ungroup() %>%
#Replicate each set for 100 simulations
crossing(sim = 1:100) %>%
#Use predictors
mutate(age.days = runif(n(), 958, 8353)) %>%
#Use the model to populate
mutate(length.cm = rnorm(n(), intercept + slope * age.days, residual_sd)) %>%
ungroup()
#### Fit Models ####
fit <- simulation %>%
# Group
group_by(sim, slope, intercept, sample_size, residual_sd) %>%
nest() %>%
# Fit the model to this data
mutate(model = purrr::map(data, ~lm(length.cm~age.days, data = .))) %>%
# Extract coefficients and p values to clean up
mutate(coefs = purrr::map(model, ~tidy(.))) %>%
unnest(coefs) %>%
ungroup() %>%
filter(term == "age.days")
setwd("Desktop/In Class Code 2018/Homework/Midterm/Scripts")
setwd("briannashaughnessy/Desktop/In Class Code 2018/Homework/Midterm/Scripts")
getwd()
setwd("Desktop/In Class Code 2018")
setwd("In Class Code 2018/Homework")
setwd("Desktop/In Class Code 2018")
getwd()
setwd("Desktop/In Class Code 2018")
setwd("Mid Term")
setwd("Mid Term/Data")
setwd("Desktop/In Class Code 2018/Mid Term/Data")
setwd("Mid Term")
getwd()
Morphology <- read_csv("../Mid Term/Data/Morphology data.csv")
#Look at the data
head(Morphology)
#Rename difficult column names
Morphology <- rename(Morphology, Tarsus = `Tarsus (mm)`, Culmen = `Culmen (mm)`)
#There are NAs and certain columns that we will not be using so I will restructure the data to omit unneeded columns.
Morphology <- Morphology[-c(2:5, 8:10)] %>%
na.omit()
####Fit the Model####
Morph_lm <- lm(`Culmen` ~ `Tarsus`, data = Morphology)
####Test Assumptions####
#Q-Q plot isn't too bad...
plot(Morph_lm, which = 2)
#Cooks distance looks like there might be outliers
plot(Morph_lm, which = 4)
#Distribution of residuals - doesn't look terrible. Normal distribution
residual_Morph <- residuals(Morph_lm)
hist(residual_Morph)
####Query our Model####
T1 <- anova(Morph_lm)
T2 <- summary(Morph_lm)
tidy(T1)
tidy(T2)
####Visualize####
#First the scatter
Morph_scatter <- ggplot(data = Morphology,
mapping = aes(x = `Culmen`,
y = `Tarsus`)) +
geom_point()
#Add the regression line
Morph_scatter +
stat_smooth(method = lm, formula = y~x)
####Look at the Data####
#determine if lm is appropriate - looks good
morph_plot <- ggplot(data = Morphology, aes(x = Culmen, y = Tarsus)) +
geom_point()
morph_plot
####Fit the Model####
morph_mod <- glm(Culmen ~ Tarsus,
family = gaussian(link = "identity"),
data = Morphology)
####Test the Assumptions####
morph_fit <- predict(morph_mod)
morph_res <- residuals(morph_mod)
#Plot them
qplot(morph_fit, morph_res)
qqnorm(morph_res)
qqline(morph_res)
####Likelihood Ratio Test of Model####
#To Test against null
morph_mod_null <- glm(Culmen ~ 1,
family = gaussian(link = "identity"),
data = Morphology)
anova(morph_mod_null, morph_mod, test = "LRT")
#T-test for parameters
summary(morph_mod)
####Visualization####
ggplot(Morphology,
mapping = aes(x = `Tarsus`, y = `Culmen`)) +
geom_point() +
stat_smooth(method = "glm", method.args = list(family = gaussian(link = "identity")))
####Look at the data####
morph_plot <- ggplot(data = Morphology, aes(x = Culmen, y = Tarsus)) +
geom_point()
morph_plot
#Fit the Model
morph_b_mod <- brm(Culmen ~ Tarsus,
data = Morphology,
family = gaussian(link = "identity"))
####Test Bayesian Assumptions####
#Inspect chains and posteriors
plot(morph_b_mod)
#Inspect rhat
mcmc_rhat(rhat(morph_b_mod))
#Inspect Autocorrelation
mcmc_acf(as.data.frame(morph_b_mod))
#Model Assumptions
morph_fit <- predict(morph_b_mod) %>% as_tibble
morph_res <- residuals(morph_b_mod) %>% as_tibble
qplot(morph_fit$Estimate, morph_res$Estimate)
#Fit
pp_check(morph_b_mod, type = "scatter")
#Normality
qqnorm(morph_res$Estimate)
qqline(morph_res$Estimate)
pp_check(morph_b_mod, type="error_hist", bins= 8)
#Match to Posterior
pp_check(morph_b_mod, type="stat_2d", test=c("mean", "sd"))
pp_check(morph_b_mod)
#coefficients
summary(morph_b_mod, digits=5)
####Confidence Intervals####
posterior_interval(morph_b_mod)
####Visualize#### Can't get the CI to show.
morph_chains <- as.data.frame(morph_b_mod)
morph_plot +
geom_abline(intercept=morph_chains[,1], slope = morph_chains[,2], alpha=0.1, color="lightgrey") +
geom_abline(intercept=fixef(morph_b_mod)[1], slope = fixef(morph_b_mod)[2], color="red") +
geom_point()
####Summary of 3 Fits for Comparison####
#Least Squares
tidy(Morph_lm)
confint(Morph_lm)
#Likelihood
tidy(morph_mod)
confint(morph_mod, method = "quad")
#Bayes
summary(morph_b_mod, digits = 5)
posterior_interval(morph_b_mod)
#Call the glm() to provide reasonable bounds
summary(morph_mod)
####Create Function####
likelihood_function <- function(slope, intercept, residual_sd) {
#Generate Data
culmen_fit <- intercept + slope * Morphology$Tarsus
#Generate Likelihood
sum(dnorm(Morphology$Culmen, culmen_fit, residual_sd, log = TRUE))
}
####Grid Sample with Function####
morph_grid <- crossing(intercept = -0.099,
slope = seq(0.1, 0.4, by = 0.01),
residual_sd = seq(0.1, 0.3, by = 0.1)) %>%
rowwise() %>%
mutate(log_like = likelihood_function(slope, intercept, residual_sd)) %>%
ungroup()
#Find the MLE:
MLE <- morph_grid %>%
filter(log_like == max(log_like))
MLE
#Compare to:
morph_mod
#Plot the profile for slope
morph_slope_profile <- morph_grid %>%
group_by(slope) %>%
filter(log_like == max(log_like)) %>%
ungroup()
qplot(slope, log_like, data = morph_slope_profile, geom = "line")
#Find Confidence Interval for Slope - something is going wrong here.
#I think it has to do with log_lik as a function vs. log_lik as a variable
#Look into this and it will probably fix everything!
morph_slope_profile %>%
filter(log_like > max(log_like) - 1.92) %>%
filter(row_number() == 1 | row_number() == n())
####Not sure I need to do this but.....it doens't look right.
library(viridis)
ggplot(morph_grid %>%
filter(residual_sd == 0.3) %>%
filter(log_like > max(logLike) - 1.92),
aes(x = residual_sd, y = slope, fill = exp(logLike))) +
geom_raster() +
scale_fill_viridis(option = "B")
morph_prior <- brm(Culmen ~ Tarsus,
data = Morphology,
family = gaussian(),
set_prior = 0.4, 0.01)
summary(morph_prior, digits = 5)
posterior_interval(morph_prior)
morph_prior <- brm(Culmen ~ Tarsus,
data = Morphology,
family = gaussian(),
set_prior = 0.4, 0.01)
morph_prior <- brm(Culmen ~ Tarsus,
data = Morphology,
family = gaussian(),
brmsprior = 0.4, 0.01)
morph_prior <- brm(Culmen ~ Tarsus,
data = Morphology,
family = gaussian(),
prior = c(prior(normal(0.4), class = b),
prior(normal(0.01), class = sigma)))
morph_prior <- brm(Culmen ~ Tarsus,
data = Morphology,
family = gaussian(),
prior = c(prior(normal(0.4, 0.4), class = b),
prior(normal(0.01, 0.01), class = sigma)))
summary(morph_prior, digits = 5)
posterior_interval(morph_prior)
n_morph <- Morphology[1:10,]
n_10_morph <- brm(Culmen ~ Tarsus,
data = n_morph,
family = gaussian())
summary(n_10_morph, digits = 5)
posterior_interval(n_10_morph)
####Create Function####
like_function <- function(slope, intercept, residual_sd) {
#Generate Data
culmen_fit <- intercept + slope * Morphology$Tarsus
#Generate Likelihood
sum(dnorm(Morphology$Culmen, culmen_fit, residual_sd, log = TRUE))
}
####Grid Sample with Function####
morph_grid <- crossing(intercept = -0.099,
slope = seq(0.1, 0.5, by = 0.01),
residual_sd = seq(0.1, 0.3, by = 0.1)) %>%
rowwise() %>%
mutate(log_lik = like_function(slope, intercept, residual_sd)) %>%
ungroup()
#Find the MLE:
MLE <- morph_grid %>%
filter(slope) %>%
gilter(log_lik) %>%
ungroup()
MLE
#Compare to:
morph_mod
#Plot the profile for slope
morph_slope_profile <- ggplot(data = MLE) +
geom_line(aes(x = slope, y = log_lik)) +
ylab("Log Likelihood") + xlab("Slope")
#Call the glm() to provide reasonable bounds
summary(morph_mod)
####Create Function####
like_function <- function(slope, intercept, residual_sd) {
#Generate Data
culmen_fit <- intercept + slope * Morphology$Tarsus
#Generate Likelihood
sum(dnorm(Morphology$Culmen, culmen_fit, residual_sd, log = TRUE))
}
####Grid Sample with Function####
morph_grid <- crossing(intercept = -0.099,
slope = seq(0.1, 0.5, by = 0.01),
residual_sd = seq(0.1, 0.3, by = 0.1)) %>%
rowwise() %>%
mutate(log_lik = like_function(slope, intercept, residual_sd)) %>%
ungroup()
#Find the MLE:
MLE <- morph_grid %>%
filter(slope) %>%
filter(log_lik) %>%
ungroup()
MLE
#Plot the profile for slope
morph_slope_profile <- ggplot(data = MLE) +
geom_line(aes(x = slope, y = log_lik)) +
ylab("Log Likelihood") + xlab("Slope")
morph_slope_profile
####Grid Sample with Function####
morph_grid <- crossing(intercept = -0.099,
slope = seq(0.1, 0.5, by = 0.01),
residual_sd = seq(0.1, 0.3, by = 0.1)) %>%
rowwise() %>%
mutate(log_like = like_function(slope, intercept, residual_sd)) %>%
ungroup()
#Find the MLE:
MLE <- morph_grid %>%
filter(slope) %>%
filter(log_lik) %>%
ungroup()
MLE
#Plot the profile for slope
morph_slope_profile <- ggplot(data = MLE) +
geom_line(aes(x = slope, y = log_lik)) +
ylab("Log Likelihood") + xlab("Slope")
morph_slope_profile
